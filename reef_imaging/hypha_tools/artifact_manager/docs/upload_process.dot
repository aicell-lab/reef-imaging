digraph ReefImagingUploadProcess {
    // Graph settings
    rankdir=TB;
    compound=true;
    fontname="Arial";
    fontsize=14;
    node [fontname="Arial", fontsize=12, shape=box, style="rounded,filled", fillcolor=lightblue];
    edge [fontname="Arial", fontsize=10];
    
    // Title
    title [label="Reef Imaging Upload Process Architecture", shape=none, fillcolor=white, fontsize=20, fontcolor=darkblue];
    
    // Subgraph for common initialization
    subgraph cluster_init {
        label="Initialization";
        style="rounded,filled";
        fillcolor=lightyellow;
        
        start [label="Start", shape=oval];
        get_folders [label="Get timelapse folders\nmatching experiment ID"];
        get_processed [label="Check already\nprocessed folders"];
        user_input [label="Ask user for\nstart/end folders"];
        
        start -> get_folders -> get_processed -> user_input;
    }
    
    // OME-Zarr Stitch Upload Process
    subgraph cluster_stitch {
        label="OME-Zarr Stitch Upload Process";
        style="rounded,filled";
        fillcolor=lightpink;
        
        stitch_start [label="Stitch Upload\nProcess", shape=oval];
        check_done [label="Check for .done file"];
        done_exists [label=".done file exists?", shape=diamond];
        stitch_folder [label="Stitch folder\n(create zarr file)"];
        stitch_success [label="Stitching success?", shape=diamond];
        find_zarr [label="Find matching zarr file"];
        
        // Connect to Hypha
        connect_hypha_stitch [label="Connect to Hypha\nwith retry"];
        
        // Begin upload process
        staging_zarr [label="Put artifact in\nstaging mode"];
        get_channels [label="Get channels from zarr file"];
        channel_loop [label="Process each channel"];
        zip_upload_channel [label="Zip and upload channel"];
        commit_zarr [label="Commit dataset"];
        cleanup_zarr [label="Clean up zarr files"];
        stitch_record [label="Save record of\nprocessed folder"];
        stitch_next [label="Move to next folder", shape=oval];
        
        stitch_start -> check_done -> done_exists;
        done_exists -> find_zarr [label="Yes"];
        done_exists -> stitch_folder [label="No"];
        stitch_folder -> stitch_success;
        stitch_success -> find_zarr [label="Yes"];
        stitch_success -> stitch_next [label="No", style=dashed, color=red];
        
        find_zarr -> connect_hypha_stitch -> staging_zarr;
        staging_zarr -> get_channels -> channel_loop;
        channel_loop -> zip_upload_channel;
        zip_upload_channel -> channel_loop [constraint=false, label="Next channel"];
        channel_loop -> commit_zarr [label="All channels\nuploaded"];
        commit_zarr -> cleanup_zarr -> stitch_record -> stitch_next;
    }
    
    // Treatment Data Upload Process
    subgraph cluster_treatment {
        label="Treatment Data Upload Process";
        style="rounded,filled";
        fillcolor=lightcyan;
        
        treatment_start [label="Treatment Upload\nProcess", shape=oval];
        
        // Connect to Hypha
        connect_hypha_treatment [label="Connect to Hypha\nwith retry"];
        
        treatment_staging [label="Put dataset in\nstaging mode"];
        zip_upload_folder [label="Zip and upload folder"];
        treatment_commit [label="Commit dataset"];
        treatment_record [label="Save record of\nprocessed folder"];
        treatment_next [label="Move to next folder", shape=oval];
        
        treatment_start -> connect_hypha_treatment -> treatment_staging;
        treatment_staging -> zip_upload_folder -> treatment_commit;
        treatment_commit -> treatment_record -> treatment_next;
    }
    
    // Connect the subgraphs
    user_input -> treatment_start [lhead=cluster_treatment];
    user_input -> stitch_start [lhead=cluster_stitch];
    
    // Demonstrate folder loop
    treatment_next -> treatment_start [label="More folders", constraint=false, style=dashed];
    stitch_next -> stitch_start [label="More folders", constraint=false, style=dashed];
    
    // Exit points for each process
    exit_stitch [label="End Process", shape=oval, fillcolor=salmon];
    exit_treatment [label="End Process", shape=oval, fillcolor=salmon];
    
    // Connect exit points to respective processes
    stitch_next -> exit_stitch [label="No more folders"];
    treatment_next -> exit_treatment [label="No more folders"];
    
    // Files and data stores
    node [shape=cylinder, fillcolor=lightgrey];
    
    stitch_upload_progress [label="stitch_upload_progress.txt"];
    zarr_upload_record [label="zarr_upload_record.json"];
    treatment_progress [label="treatment_upload_progress.txt"];
    treatment_record [label="treatment_upload_record.json"];
    
    stitch_record -> stitch_upload_progress [style=dashed];
    zip_upload_channel -> zarr_upload_record [style=dashed];
    treatment_record -> treatment_progress [style=dashed];
    zip_upload_folder -> treatment_record [style=dashed];
    
    // Legend
    subgraph cluster_legend {
        label="Legend";
        style="rounded,filled";
        fillcolor=white;
        
        node [shape=box, width=0.5, height=0.3, style="filled", fontsize=10];
        process [label="Process", fillcolor=lightblue];
        decision [label="Decision", shape=diamond, fillcolor=lightblue];
        data [label="Data Store", shape=cylinder, fillcolor=lightgrey];
        
        start_stop [label="Start/Stop", shape=oval, fillcolor=lightblue];
        
        process -> decision [style=invis];
        decision -> data [style=invis];
        data -> start_stop [style=invis];
    }
    
    // Error Handling Notes
    subgraph cluster_error_handling {
        label="Error Handling";
        style="rounded,filled";
        fillcolor=lavender;
        
        err_connect [label="Connection Retries\n- Exponential backoff\n- Max retry attempts"];
        err_staging [label="Staging Retries\n- Graceful reconnection"];
        err_commit [label="Commit Retries\n- Connection refresh\n- Timeout handling"];
        
        err_connect -> err_staging -> err_commit [style=invis];
    }
} 